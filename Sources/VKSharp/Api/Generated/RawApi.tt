<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly Name="System.Configuration" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System" #>
<#@ output extension=".cs" #>
<#@ include file="SharedFuncs.tt"#>
using System;
using System.Linq;
using System.Threading.Tasks;
using VKSharp.Core.Entities;
using VKSharp.Core.Enums;
using VKSharp.Core.ResponseEntities;
using VKSharp.Data.Parameters;

// ReSharper disable UnusedMember.Global
namespace VKSharp {
    public partial class RawApi {
<#
    var ms = GetMethods(Host.ResolvePath("VKSharpFuncs.xml"));                //method descriptions
    var gs = ms.GroupBy(a=>a.Name.Split('.').FirstOrDefault()).ToArray();    //method groups
#>
        private void InitializeMethodGroups(){
<#foreach (var methodGroup in gs){#>

        <#=ToMeth(methodGroup.Key)#> = new <#="MethodGroup_"+methodGroup.Key#>(this);
    <#}#>
    }
<#foreach (var methodGroup in gs){ var cln = "MethodGroup_"+methodGroup.Key; #>

        public <#=cln#> <#=ToMeth(methodGroup.Key)#> {get; private set;}
        public partial class <#=cln#> {
            private readonly RawApi _parent;
            internal <#=cln#>(RawApi parent){_parent=parent;}
<# foreach ( var node in methodGroup ) { #>

            public async Task<string> <#=ToMeth(node.Name.Split('.').Last())#>( <#=GetParamsString(node)#> ){
                return await _parent.Executor.ExecRawAsync(
                    _parent._reqapi
                        .<#=ToMeth(node.Name)#>(
                           <#=GetCallParamsString( node )#>
                           )
                        ).ConfigureAwait(false);
                }
                    <# } #>
                }
        <#
            }
        #>
    }
}