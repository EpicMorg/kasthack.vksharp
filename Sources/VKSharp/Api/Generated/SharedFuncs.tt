<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System" #>
<#@ assembly Name="System.Configuration" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Xml.Serialization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.Serialization" #>
<#+
[Serializable]
[XmlType("HardcodedParam")]
public class HardcodedParameter{
    [XmlAttribute]
    public string Name {get;set;}
    [XmlAttribute]
    public string Value {get;set;}
}
[Serializable]
public class Method {
    [XmlAttribute]
    public string Name {get;set;}
    [XmlAttributeAttribute]
    public string Type {get;set;}
    [XmlAttribute]
    public bool NeedToken {get;set;}
    [XmlAttribute]
    public string NameSuffix {get;set;}
    [XmlAttribute]
    public int Pageable {get;set;}
    public Param[] Params {get;set;}
    public HardcodedParameter[] Hardcoded{get; set; }
}
[Serializable]
public class Param {
    [XmlAttribute]
    public string Name {get;set;}
    [XmlAttribute]
    public string Type {get;set;}
    [XmlAttribute]
    public string Default {get;set;}
    [XmlIgnore]
    public bool DefaultSpecified { get { return Default != null; } }
    [XmlAttribute]
    public string Custom {get;set;}
    [XmlIgnore]
    public bool CustomSpecified { get { return Custom != null; } }
}

private static readonly XmlSerializer Serializer = new XmlSerializer(typeof(Method[]));
public static string GetCallParamsString(Method node) {
    var last = node.Params.LastOrDefault();
    var isparams = last != null && last.Type.EndsWith( "[]" );
    List<string> ret = new List<string>();
    ret.AddRange( node.Params
        .Reverse().Skip( 1 ).Reverse()
        .Select( a => ToMeth( a.Name, true ) ) );
    var laststr = last!=null? ToMeth( last.Name, true ): null;
    var pagestring = node.Pageable != 0 ? "offset, count" : null;
    if ( isparams ) {
        if ( pagestring != null )
            ret.Add( pagestring );
        ret.Add( laststr );
    }
    else {
        if ( laststr != null )
            ret.Add( laststr );
        if ( pagestring != null )
            ret.Add( pagestring );
    }
    return String.Join( ",", ret );
}
public static string GetParamsString(Method node) {
    var last = node.Params.LastOrDefault();
    var isparams = last != null && last.Type.EndsWith( "[]" );
    List<string> ret = new List<string>();
    ret.AddRange( node.Params
        .Reverse().Skip( 1 ).Reverse()
        .Select( a =>
            String.Format(
                " {0} {1} {2}",
                a.Type,
                ToMeth( a.Name, true ),
                !string.IsNullOrWhiteSpace( a.Default ) ? "= " + a.Default : ""
                )
        ) );
    var laststr = last!=null?
        String.Format(
                        "{0} {1} {2} {3}",
                        isparams? "params" : "",
                        last.Type,
                        ToMeth( last.Name, true ),
                        !isparams && !string.IsNullOrWhiteSpace(last.Default) ? "= " + last.Default : "" ):null;
    var pagestring = node.Pageable != 0 ? ( "int offset = 0, int count = " + node.Pageable ) : null;
    if ( isparams ) {
        if ( pagestring != null )
            ret.Add( pagestring );
        ret.Add( laststr );
    }
    else {
        if ( laststr != null )
            ret.Add( laststr );
        if ( pagestring != null )
            ret.Add( pagestring );
    }
    return String.Join( ",", ret );
}
public static Method[] GetMethods(string file){
    using (var f = File.OpenRead(file))
        return (Method[])Serializer.Deserialize(f);
}
public static void SaveMethods( string file, Method[] methods ) {
    using (var f = File.OpenWrite(file))
        Serializer.Serialize( f, methods );
}
public static string ToMeth(string name,bool p=false)
{
    var t = new StringBuilder();
    t.Append(p?Char.ToLower(name[0]):Char.ToUpper(name[0]));
    for (var index = 1; index < name.Length; index++)
    {
        var c = name[index];
        //add '_' before numbers and capitals 
        if (c=='.'||c=='_') t.Append(Char.ToUpper(name[++index]));
        else t.Append(c);
    }
    return t.ToString();
}
public static string Stringify(string name, string type){
    //todo: typing
    //common types
    switch ( type ) {
        case "Audio":
            return "";//todo???
        case "string":
            return name;
        case "bool":
            return "("+name+"?1:0).ToNCString()";
        case "bool?":
            return string.Format( "({0} != null ? ( {0}.Value ? 1 : 0 ).ToNCString() : \"\")", name );
        case "string[]":
            return "String.Join(\",\","+name+")";
        case "UserFields":
            return "String.Join( \",\", MiscTools.GetUserFields( "+name+" ) )";
        case "GroupFields":
            return "String.Join( \",\", MiscTools.GetGroupFields( "+name+" ) )";
        case "Relation":
            return "((int)"+name+").ToNCString()";
        case "Relation?":
            return "MiscTools.NullableString((int?)"+name+")";
        case "Sex":
            return "((int)"+name+").ToNCString()";
        case "Sex?":
            return "MiscTools.NullableString((int?)"+name+")";
        case "AudioGenre":
        case "SearchSortOrder":
            return "((int)" + name + ").ToString()";
        case "AudioGenre?":
            return string.Format( "({0}!=null?((int)({0})).ToString():String.Empty)", name );
        case "AudioSortOrder":
            return "((int)"+name+").ToNCString()";
        case "UserSortOrder":
        case "NameCase":
        case "SpecialAlbum":
        case "ComplaintType":
        case "ImActivity":
            return name+".ToNClString()";
        case "WallPostFilter":
            return name+".ToNClString().ToSnake()";
        case "FriendSuggestionFilters":
            return String.Format("String.Join( \",\", MiscTools.GetFilterFields( {0} ) )", name);
        case "ReportReason?":
            return String.Format("{0} == null ? \"\" : ( (int){0} ).ToNCString()", name);
        case "PrivacyType?":
            return String.Format("MiscTools.NullableString( (byte?){0} )", name);
        case "FeedType?":
        case "UserSortOrder?":
            return String.Format("MiscTools.NullableString( {0} )",name);
    }

    //numbers, numbers?, numbers[]
    var nums = "int,uint,byte,sbyte,short,ushort,long,ulong,double".Split(',');
    if (nums.Any(a=>a==type)) return name+".ToNCString()";    
    if (nums.Any(a=>type==a+"?")) return "MiscTools.NullableString("+name+")";
    if (nums.Any(a=>type==a+"[]")) return string.Format( "({0}??new {1}{{}}).ToNCStringA()", name, type );
    if (Regex.IsMatch(type, @"Tuple<\w+\,[ ]*\w+>\[\]"))
        return "String.Join(\",\","+ name+".Select(a=>a.Item1 +\"_\" +a.Item2))";

    //default
    return name+".ToString()";
}
#>