<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly Name="System.Configuration" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System" #>
<#@ output extension=".cs" #>
<#@ include file="SharedFuncs.tt"#>
using System;
using System.Collections.Generic;
using System.Linq;
using VKSharp.Core.Entities;
using VKSharp.Core.Enums;
using VKSharp.Core.ResponseEntities;
using VKSharp.Data.Api;
using VKSharp.Data.Parameters;
using VKSharp.Data.Request;
using VKSharp.Helpers;

// ReSharper disable UnusedMember.Global
// ReSharper disable UseObjectOrCollectionInitializer
namespace VKSharp {
    public partial class RequestApi {
    <#
        var ms = GetMethods(Host.ResolvePath("VKSharpFuncs.xml"));
        foreach ( var node in ms ) {
        var returnType =node.Type;
            if ( returnType == "void" ) returnType = "bool";#>
    public VKRequest<<#=returnType#>> <#=ToMeth(node.Name)#>(
            <#=GetParamsString(node)#>
){
            var req = new VKRequest<<#=returnType#>>{
                MethodName = "<#=node.Name#>",
                Parameters = new Dictionary<string, string> {
                    <# foreach(var a in node.Params){#>
                        { "<#=a.Name.Replace("@","")#>", <#=a.Custom==null?Stringify(ToMeth(a.Name, true), a.Type) :a.Custom.Replace("#name",ToMeth(a.Name,true))#> },
                    <#}#>
                    <#if ( node.Pageable != 0 ) { #>
                        { "offset", offset.ToNCString() },
                        { "count", count.ToNCString() },
                    <# }#>
                    <# if ( node.Hardcoded != null ) {
    foreach ( var pair in node.Hardcoded ) {
        #>
            {"<#=pair.Name#>","<#=pair.Value#>"},
        <#
    }
                    }#>
        }
            };
    <#if (!node.NeedToken){#>
        if (IsLogged){
    <#}#>
            req.Token = CurrentToken;
            <#=!node.NeedToken?"}":""#>
            return req;
        }
    <#}#>
}
}