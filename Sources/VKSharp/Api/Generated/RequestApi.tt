<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly Name="System.Configuration" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System" #>
<#@ output extension=".cs" #>
<#@ include file="SharedFuncs.tt"#>
using System;
using System.Collections.Generic;
using System.Linq;
using VKSharp.Core.Entities;
using VKSharp.Core.Enums;
using VKSharp.Core.ResponseEntities;
using VKSharp.Data.Api;
using VKSharp.Data.Parameters;
using VKSharp.Data.Request;
using VKSharp.Helpers;
using VKSharp.Helpers.DataTypes;

// ReSharper disable UnusedMember.Global
// ReSharper disable UseObjectOrCollectionInitializer
namespace VKSharp {
    public partial class RequestApi {
<#
        var ms = GetMethods(Host.ResolvePath("VKSharpFuncs.xml"));
        var gs = ms.GroupBy(a=>a.Name.Split('.').FirstOrDefault()).ToArray();
#>
        private void InitializeMethodGroups(){
    <#foreach (var methodGroup in gs){#>
        this.<#=ToMeth(methodGroup.Key)#> = new <#="MethodGroup_"+methodGroup.Key#>(this);
    <#}#>
    }
<#
foreach ( var methodGroup in gs ) {
    var cln = "MethodGroup_" + methodGroup.Key;
    #>
        public <#=cln #> <#=ToMeth( methodGroup.Key ) #> {get; private set;}
        public partial class <#=cln #> {
            private readonly RequestApi _parent;
            internal <#=cln#>(RequestApi parent){_parent=parent;}
<#
    foreach ( var method in methodGroup ) {
        var methodName = ToMeth( method.Name.Split( '.' ).Last() )+method.NameSuffix;
        var returnType = method.Type;
        if ( returnType == "void" ) returnType = "bool";
#>

            public VKRequest<<#=returnType #>> <#=methodName #>(
                <#=GetParamsString( method ) #>
            ) {
                var req = new VKRequest<<#=returnType #>>{
                    MethodName = "<#=method.Name #>",
                    Parameters = new Dictionary<string, string> {

<#
foreach ( var parameter in method.Params ) {
#>
                        { "<#=parameter.Name.Replace( "@", "" ) #>", <#if ( parameter.Custom == null ) { #><#=Stringify( ToMeth( parameter.Name, true ), parameter.Type ) #><# }
else { #> <#=parameter.Custom.Replace( "#name", ToMeth( parameter.Name, true ) ) #> <# } #>},
<# } #>
<#
foreach ( var parameter in method.Hardcoded??new HardcodedParameter[]{} ) {
#>
                        {"<#=parameter.Name.ToString() #>","<#=parameter.Value #>"},
<#
}
#>
<#if ( method.Pageable != 0 ) { #>
                        { "offset", offset.ToNCString() },
                        { "count", count.ToNCString() },
<# } #>

                    }
                };
<#if ( !method.NeedToken ) { #>
                if (_parent.IsLogged)
<# } #>
                    req.Token = _parent.CurrentToken;
                return req;
            }
<#
    }
#>
        }
<#
}
#>
    }
}