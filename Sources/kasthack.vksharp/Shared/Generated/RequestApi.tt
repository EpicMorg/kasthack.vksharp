<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly Name="System.Configuration" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System" #>
<#@ output extension=".cs" #>
<#@ include file="SharedFuncs.tt"#>
using System;
using System.Collections.Generic;
using System.Linq;
using kasthack.vksharp.DataTypes;
using kasthack.vksharp.DataTypes.Entities;
using kasthack.vksharp.DataTypes.ResponseEntities;
using kasthack.vksharp.DataTypes.Enums;
using kasthack.vksharp.DataTypes.EntityFragments;
using kasthack.vksharp.DataTypes.Interfaces;
using kasthack.vksharp.Implementation;
using kasthack.vksharp.Internal;

// ReSharper disable UnusedMember.Global
// ReSharper disable UseObjectOrCollectionInitializer
namespace kasthack.vksharp {
    public partial class RequestApi {
<#
        var ms = GetMethods(Host.ResolvePath("Methods.xml"));
        var gs = ms.GroupBy(a=>a.Name.Split('.').FirstOrDefault()).ToArray();
#>
        private void InitializeMethodGroups(){
    <#foreach (var methodGroup in gs){#>
        this.<#=ToMeth(methodGroup.Key)#> = new <#="MethodGroup_"+methodGroup.Key#>(this);
    <#}#>
    }
<#
foreach ( var methodGroup in gs ) {
    var cln = "MethodGroup_" + methodGroup.Key;
    #>
        public <#=cln #> <#=ToMeth( methodGroup.Key ) #> {get; private set;}
        public partial class <#=cln #> {
            private readonly RequestApi _parent;
            internal <#=cln#>(RequestApi parent){_parent=parent;}
<#
    foreach ( var method in methodGroup ) {
        var methodName = ToMeth( method.Name.Split( '.' ).Last() )+method.NameSuffix;
        var returnType = method.Type;
        if ( returnType == "void" ) returnType = "bool";
#>

<#if(method.Doc!=null){#>
<#if(method.Doc.Summary!=null){#>
            ///<summary>
<#foreach (var line in method.Doc.Summary.Split(new[]{'\r','\n'}, StringSplitOptions.RemoveEmptyEntries)){#>
            ///<#=line#>
<#}#>
            ///</summary>
<#}#>
<#if(method.Doc.Returns!=null){#>
            ///<returns>
<#foreach (var line in method.Doc.Returns.Split(new[]{'\r','\n'}, StringSplitOptions.RemoveEmptyEntries)){#>
            ///<#=line#>
<#}#>
            ///</returns>
<#}#>
<#if(method.Params!=null){#>
<#foreach (var param in method.Params.Where(a=>a.Doc!=null)){#>
            ///<param name="<#=ToMeth(param.Name,true)#>"><#=param.Doc#></param>
<#}#>
<#}#>
<#}#>
            public Request<<#=returnType #>> <#=methodName #>(
                <#=GetParamsString( method ) #>
            ) {
                var req = new Request<<#=returnType #>>{
                    MethodName = "<#=method.Name #>",
                    Parameters = new Dictionary<string, string> {

<#
foreach ( var parameter in method.Params ) {
#>
                        { "<#=parameter.Name.Replace( "@", "" ) #>", <#if ( parameter.Custom == null ) { #><#=Stringify( ToMeth( parameter.Name, true ), parameter.Type ) #><# }
else { #> <#=parameter.Custom.Replace( "#name", ToMeth( parameter.Name, true ) ) #> <# } #>},
<# } #>
<#
foreach ( var parameter in method.Hardcoded??new HardcodedParameter[]{} ) {
#>
                        {"<#=parameter.Name.ToString() #>","<#=parameter.Value #>"},
<#
}
#>
<#if ( method.Pageable != 0 ) { #>
                        { "offset", offset.NullableString() },
                        { "count", count.NullableString() },
<# } #>

                    }
                };
<#if ( !method.NeedToken ) { #>
                if (_parent.IsLogged)
<# } #>
                    req.Token = _parent.CurrentToken;
                return req;
            }
<#
    }
#>
        }
<#
}
#>
    }
}